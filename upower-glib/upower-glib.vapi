/* upower-glib.vapi generated by vapigen, do not modify. */

namespace UP {
	[CCode (cheader_filename = "upower-glib.h")]
	public class UpClient : GLib.Object {
		[CCode (cname = "up_client_new", has_construct_function = false, type = "UpClient*")]
		public UpClient ();
		[CCode (cname = "up_client_new_full", has_construct_function = false, type = "UpClient*")]
		public UpClient.full () throws GLib.Error;
		[CCode (cname = "up_client_get_critical_action")]
		public static unowned string get_critical_action (UP.UpClient client);
		[CCode (cname = "up_client_get_daemon_version")]
		public static unowned string get_daemon_version (UP.UpClient client);
		[CCode (cname = "up_client_get_devices")]
		public static unowned GLib.PtrArray get_devices (UP.UpClient client);
		[CCode (cname = "up_client_get_devices2")]
		public static unowned GLib.PtrArray get_devices2 (UP.UpClient client);
		[CCode (cname = "up_client_get_display_device")]
		public static unowned UP.UpDevice get_display_device (UP.UpClient client);
		[CCode (cname = "up_client_get_lid_is_closed")]
		public static bool get_lid_is_closed (UP.UpClient client);
		[CCode (cname = "up_client_get_lid_is_present")]
		public static bool get_lid_is_present (UP.UpClient client);
		[CCode (cname = "up_client_get_on_battery")]
		public static bool get_on_battery (UP.UpClient client);
		public string daemon_version { get; }
		public bool lid_is_closed { get; }
		public bool lid_is_present { get; }
		public bool on_battery { get; }
		public virtual signal void device_added (UP.UpDevice device);
		public virtual signal void device_removed (string object_path);
	}
	[CCode (cheader_filename = "upower-glib.h")]
	public class UpDevice : GLib.Object {
		[CCode (cname = "up_device_new", has_construct_function = false, type = "UpDevice*")]
		public UpDevice ();
		[CCode (cname = "up_device_get_history_sync")]
		public static unowned GLib.PtrArray get_history_sync (UP.UpDevice device, string type, uint timespec, uint resolution) throws GLib.Error;
		[CCode (cname = "up_device_get_object_path")]
		public static unowned string get_object_path (UP.UpDevice device);
		[CCode (cname = "up_device_get_statistics_sync")]
		public static unowned GLib.PtrArray get_statistics_sync (UP.UpDevice device, string type) throws GLib.Error;
		[CCode (cname = "up_device_kind_from_string")]
		public static UP.UpDeviceKind kind_from_string (string type);
		[CCode (cname = "up_device_kind_to_string")]
		public static unowned string kind_to_string (UP.UpDeviceKind type_enum);
		[CCode (cname = "up_device_level_from_string")]
		public static UP.UpDeviceLevel level_from_string (string level);
		[CCode (cname = "up_device_level_to_string")]
		public static unowned string level_to_string (UP.UpDeviceLevel level_enum);
		[CCode (cname = "up_device_refresh_sync")]
		public static bool refresh_sync (UP.UpDevice device) throws GLib.Error;
		[CCode (cname = "up_device_set_object_path_sync")]
		public static bool set_object_path_sync (UP.UpDevice device, string object_path) throws GLib.Error;
		[CCode (cname = "up_device_state_from_string")]
		public static UP.UpDeviceState state_from_string (string state);
		[CCode (cname = "up_device_state_to_string")]
		public static unowned string state_to_string (UP.UpDeviceState state_enum);
		[CCode (cname = "up_device_technology_from_string")]
		public static UP.UpDeviceTechnology technology_from_string (string technology);
		[CCode (cname = "up_device_technology_to_string")]
		public static unowned string technology_to_string (UP.UpDeviceTechnology technology_enum);
		[CCode (cname = "up_device_to_text")]
		public static unowned string to_text (UP.UpDevice device);
		[NoAccessorMethod]
		public uint battery_level { get; set; }
		[NoAccessorMethod]
		public double capacity { get; set; }
		[NoAccessorMethod]
		public double energy { get; set; }
		[NoAccessorMethod]
		public double energy_empty { get; set; }
		[NoAccessorMethod]
		public double energy_full { get; set; }
		[NoAccessorMethod]
		public double energy_full_design { get; set; }
		[NoAccessorMethod]
		public double energy_rate { get; set; }
		[NoAccessorMethod]
		public bool has_history { get; set; }
		[NoAccessorMethod]
		public bool has_statistics { get; set; }
		[NoAccessorMethod]
		public string icon_name { owned get; set; }
		[NoAccessorMethod]
		public bool is_present { get; set; }
		[NoAccessorMethod]
		public bool is_rechargeable { get; set; }
		[NoAccessorMethod]
		public uint kind { get; set; }
		[NoAccessorMethod]
		public double luminosity { get; set; }
		[NoAccessorMethod]
		public string model { owned get; set; }
		[NoAccessorMethod]
		public string native_path { owned get; set; }
		[NoAccessorMethod]
		public bool online { get; set; }
		[NoAccessorMethod]
		public double percentage { get; set; }
		[NoAccessorMethod]
		public bool power_supply { get; set; }
		[NoAccessorMethod]
		public string serial { owned get; set; }
		[NoAccessorMethod]
		public uint state { get; set; }
		[NoAccessorMethod]
		public uint technology { get; set; }
		[NoAccessorMethod]
		public double temperature { get; set; }
		[NoAccessorMethod]
		public int64 time_to_empty { get; set; }
		[NoAccessorMethod]
		public int64 time_to_full { get; set; }
		[NoAccessorMethod]
		public uint64 update_time { get; set; }
		[NoAccessorMethod]
		public string vendor { owned get; set; }
		[NoAccessorMethod]
		public double voltage { get; set; }
		[NoAccessorMethod]
		public uint warning_level { get; set; }
	}
	[CCode (cheader_filename = "upower-glib.h")]
	public class UpHistoryItem : GLib.Object {
		[CCode (cname = "up_history_item_new", has_construct_function = false, type = "UpHistoryItem*")]
		public UpHistoryItem ();
		[CCode (cname = "up_history_item_get_state")]
		public static UP.UpDeviceState get_state (UP.UpHistoryItem history_item);
		[CCode (cname = "up_history_item_get_time")]
		public static uint get_time (UP.UpHistoryItem history_item);
		[CCode (cname = "up_history_item_get_value")]
		public static double get_value (UP.UpHistoryItem history_item);
		[CCode (cname = "up_history_item_set_from_string")]
		public static bool set_from_string (UP.UpHistoryItem history_item, string text);
		[CCode (cname = "up_history_item_set_state")]
		public static void set_state (UP.UpHistoryItem history_item, UP.UpDeviceState state);
		[CCode (cname = "up_history_item_set_time")]
		public static void set_time (UP.UpHistoryItem history_item, uint time);
		[CCode (cname = "up_history_item_set_time_to_present")]
		public static void set_time_to_present (UP.UpHistoryItem history_item);
		[CCode (cname = "up_history_item_set_value")]
		public static void set_value (UP.UpHistoryItem history_item, double value);
		[CCode (cname = "up_history_item_to_string")]
		public static unowned string to_string (UP.UpHistoryItem history_item);
		public uint state { get; set; }
		public uint time { get; set; }
		public double value { get; set; }
	}
	[CCode (cheader_filename = "upower-glib.h")]
	public class UpStatsItem : GLib.Object {
		[CCode (cname = "up_stats_item_new", has_construct_function = false, type = "UpStatsItem*")]
		public UpStatsItem ();
		[CCode (cname = "up_stats_item_get_accuracy")]
		public static double get_accuracy (UP.UpStatsItem stats_item);
		[CCode (cname = "up_stats_item_get_value")]
		public static double get_value (UP.UpStatsItem stats_item);
		[CCode (cname = "up_stats_item_set_accuracy")]
		public static void set_accuracy (UP.UpStatsItem stats_item, double accuracy);
		[CCode (cname = "up_stats_item_set_value")]
		public static void set_value (UP.UpStatsItem stats_item, double value);
		public double accuracy { get; set; }
		public double value { get; set; }
	}
	[CCode (cheader_filename = "upower-glib.h")]
	public class UpWakeupItem : GLib.Object {
		[CCode (cname = "up_wakeup_item_new", has_construct_function = false, type = "UpWakeupItem*")]
		public UpWakeupItem ();
		[CCode (cname = "up_wakeup_item_get_cmdline")]
		public static unowned string get_cmdline (UP.UpWakeupItem wakeup_item);
		[CCode (cname = "up_wakeup_item_get_details")]
		public static unowned string get_details (UP.UpWakeupItem wakeup_item);
		[CCode (cname = "up_wakeup_item_get_id")]
		public static uint get_id (UP.UpWakeupItem wakeup_item);
		[CCode (cname = "up_wakeup_item_get_is_userspace")]
		public static bool get_is_userspace (UP.UpWakeupItem wakeup_item);
		[CCode (cname = "up_wakeup_item_get_old")]
		public static uint get_old (UP.UpWakeupItem wakeup_item);
		[CCode (cname = "up_wakeup_item_get_value")]
		public static double get_value (UP.UpWakeupItem wakeup_item);
		[CCode (cname = "up_wakeup_item_set_cmdline")]
		public static void set_cmdline (UP.UpWakeupItem wakeup_item, string cmdline);
		[CCode (cname = "up_wakeup_item_set_details")]
		public static void set_details (UP.UpWakeupItem wakeup_item, string details);
		[CCode (cname = "up_wakeup_item_set_id")]
		public static void set_id (UP.UpWakeupItem wakeup_item, uint id);
		[CCode (cname = "up_wakeup_item_set_is_userspace")]
		public static void set_is_userspace (UP.UpWakeupItem wakeup_item, bool is_userspace);
		[CCode (cname = "up_wakeup_item_set_old")]
		public static void set_old (UP.UpWakeupItem wakeup_item, uint old);
		[CCode (cname = "up_wakeup_item_set_value")]
		public static void set_value (UP.UpWakeupItem wakeup_item, double value);
		public string cmdline { get; set; }
		public string details { get; set; }
		public uint id { get; set; }
		public bool is_userspace { get; set; }
		public uint old { get; set; }
		public double value { get; set; }
	}
	[CCode (cheader_filename = "upower-glib.h")]
	public class UpWakeups : GLib.Object {
		[CCode (cname = "up_wakeups_new", has_construct_function = false, type = "UpWakeups*")]
		public UpWakeups ();
		[CCode (cname = "up_wakeups_get_data_sync")]
		public static unowned GLib.PtrArray get_data_sync (UP.UpWakeups wakeups) throws GLib.Error;
		[CCode (cname = "up_wakeups_get_has_capability")]
		public static bool get_has_capability (UP.UpWakeups wakeups);
		[CCode (cname = "up_wakeups_get_properties_sync")]
		public static bool get_properties_sync (UP.UpWakeups wakeups) throws GLib.Error;
		[CCode (cname = "up_wakeups_get_total_sync")]
		public static uint get_total_sync (UP.UpWakeups wakeups) throws GLib.Error;
		public virtual signal void data_changed ();
		public virtual signal void total_changed (uint value);
	}
	[CCode (cheader_filename = "upower-glib.h", cprefix = "DEVICE_KIND_", has_type_id = false)]
	public enum UpDeviceKind {
		UNKNOWN,
		LINE_POWER,
		BATTERY,
		UPS,
		MONITOR,
		MOUSE,
		KEYBOARD,
		PDA,
		PHONE,
		MEDIA_PLAYER,
		TABLET,
		COMPUTER,
		GAMING_INPUT,
		PEN,
		TOUCHPAD,
		MODEM,
		NETWORK,
		HEADSET,
		SPEAKERS,
		HEADPHONES,
		VIDEO,
		OTHER_AUDIO,
		REMOTE_CONTROL,
		PRINTER,
		SCANNER,
		CAMERA,
		WEARABLE,
		TOY,
		BLUETOOTH_GENERIC,
		LAST
	}
	[CCode (cheader_filename = "upower-glib.h", cprefix = "DEVICE_LEVEL_", has_type_id = false)]
	public enum UpDeviceLevel {
		UNKNOWN,
		NONE,
		DISCHARGING,
		LOW,
		CRITICAL,
		ACTION,
		NORMAL,
		HIGH,
		FULL,
		LAST
	}
	[CCode (cheader_filename = "upower-glib.h", cprefix = "DEVICE_STATE_", has_type_id = false)]
	public enum UpDeviceState {
		UNKNOWN,
		CHARGING,
		DISCHARGING,
		EMPTY,
		FULLY_CHARGED,
		PENDING_CHARGE,
		PENDING_DISCHARGE,
		LAST
	}
	[CCode (cheader_filename = "upower-glib.h", cprefix = "DEVICE_TECHNOLOGY_", has_type_id = false)]
	public enum UpDeviceTechnology {
		UNKNOWN,
		LITHIUM_ION,
		LITHIUM_POLYMER,
		LITHIUM_IRON_PHOSPHATE,
		LEAD_ACID,
		NICKEL_CADMIUM,
		NICKEL_METAL_HYDRIDE,
		LAST
	}
	[CCode (cheader_filename = "upower-glib.h")]
	public const int MAJOR_VERSION;
	[CCode (cheader_filename = "upower-glib.h")]
	public const int MICRO_VERSION;
	[CCode (cheader_filename = "upower-glib.h")]
	public const int MINOR_VERSION;
}
